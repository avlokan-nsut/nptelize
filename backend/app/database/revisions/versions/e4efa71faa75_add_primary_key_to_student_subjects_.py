"""add primary key to student_subjects table

Revision ID: e4efa71faa75
Revises: 387e676d1f94
Create Date: 2025-08-08 23:04:48.882022

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

from cuid import cuid


# revision identifiers, used by Alembic.
revision: str = 'e4efa71faa75'
down_revision: Union[str, None] = '387e676d1f94'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('student_subjects', sa.Column('id', sa.String(), nullable=True))

    connection = op.get_bind()
    
    # Get all existing student_subjects records
    result = connection.execute(sa.text("""
        SELECT student_id, subject_id, year, is_sem_odd 
        FROM student_subjects 
        WHERE id IS NULL
    """))
    rows = result.fetchall()
    
    # Update each row with a unique CUID
    for row in rows:
        connection.execute(
            sa.text("""
                UPDATE student_subjects 
                SET id = :id 
                WHERE student_id = :student_id 
                AND subject_id = :subject_id 
                AND year = :year 
                AND is_sem_odd = :is_sem_odd
            """),
            {
                "id": cuid(), 
                "student_id": row[0], 
                "subject_id": row[1],
                "year": row[2],
                "is_sem_odd": row[3]
            }
        )
        
    # Make id column non-nullable
    op.alter_column('student_subjects', 'id', nullable=False)
    
    # Drop the old composite primary key
    op.drop_constraint('student_subjects_pkey', 'student_subjects', type_='primary')
    
    # Create new primary key on id
    op.create_primary_key('student_subjects_pkey', 'student_subjects', ['id'])

    op.create_unique_constraint(None, 'student_subjects', ['student_id', 'subject_id', 'year', 'is_sem_odd'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # Drop the new primary key
    op.drop_constraint('student_subjects_pkey', 'student_subjects', type_='primary')
    
    # Drop the unique constraint
    op.drop_constraint('uq_student_subjects_composite', 'student_subjects', type_='unique')
    
    # Recreate the old composite primary key
    op.create_primary_key(
        'student_subjects_pkey', 
        'student_subjects', 
        ['student_id', 'subject_id', 'year', 'is_sem_odd']
    )
    
    # Drop the id column
    op.drop_column('student_subjects', 'id')