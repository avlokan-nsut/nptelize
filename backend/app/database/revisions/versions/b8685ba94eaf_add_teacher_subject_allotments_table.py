"""add teacher_subject_allotments table

Revision ID: b8685ba94eaf
Revises: 707b66d3359c
Create Date: 2025-08-09 17:35:43.093299

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from cuid import cuid


# revision identifiers, used by Alembic.
revision: str = 'b8685ba94eaf'
down_revision: Union[str, None] = '707b66d3359c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('teacher_subject_allotments',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('teacher_id', sa.String(), nullable=False),
    sa.Column('subject_id', sa.String(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('is_sem_odd', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], ),
    sa.ForeignKeyConstraint(['teacher_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('teacher_id', 'subject_id', 'year', 'is_sem_odd')
    )
    
    # Populate teacher_subject_allotments with unique (subject_id, teacher_id) pairs from student_subject_enrollments
    connection = op.get_bind()
    
    # Get unique teacher-subject pairs from student_subject_enrollments
    result = connection.execute(sa.text("""
        SELECT DISTINCT teacher_id, subject_id 
        FROM student_subject_enrollments
    """))
    
    # Insert each unique pair into teacher_subject_allotments
    for row in result:
        teacher_id, subject_id = row
        new_id = cuid()
        connection.execute(sa.text("""
            INSERT INTO teacher_subject_allotments (id, teacher_id, subject_id, year, is_sem_odd)
            VALUES (:id, :teacher_id, :subject_id, :year, :is_sem_odd)
        """), {
            'id': new_id,
            'teacher_id': teacher_id,
            'subject_id': subject_id,
            'year': 2025,
            'is_sem_odd': False
        })
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('teacher_subject_allotments')
    # ### end Alembic commands ###
