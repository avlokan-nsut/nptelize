"""edit roles table and add user role mapping

Revision ID: 387e676d1f94
Revises: 56144840703d
Create Date: 2025-08-08 22:41:48.393832

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from cuid import cuid


# revision identifiers, used by Alembic.
revision: str = '387e676d1f94'
down_revision: Union[str, None] = '56144840703d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    op.add_column('roles', sa.Column('id', sa.String(), nullable=True))
    
    connection = op.get_bind()
    
    # Get all existing roles
    result = connection.execute(sa.text("SELECT module_name, name FROM roles WHERE id IS NULL"))
    rows = result.fetchall()
    
    # Update each row with a unique CUID
    for row in rows:
        connection.execute(
            sa.text("UPDATE roles SET id = :id WHERE module_name = :module_name AND name = :name"),
            {"id": cuid(), "module_name": row[0], "name": row[1]}
        )
        
    # Make id column non-nullable
    op.alter_column('roles', 'id', nullable=False)
    
    # Drop the old composite primary key
    op.drop_constraint('roles_pkey', 'roles', type_='primary')
    
    # Create new primary key on id
    op.create_primary_key('roles_pkey', 'roles', ['id'])
    
    # Add unique constraint on the old primary key columns
    op.create_unique_constraint(None, 'roles', ['module_name', 'name'])
    
    op.create_table('user_role_mappings',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('role_id', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    
    op.alter_column('student_subjects', 'year',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('student_subjects', 'is_sem_odd',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('student_subjects', 'teacher_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_foreign_key(None, 'student_subjects', 'users', ['teacher_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'student_subjects', type_='foreignkey')
    op.alter_column('student_subjects', 'teacher_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('student_subjects', 'is_sem_odd',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('student_subjects', 'year',
               existing_type=sa.INTEGER(),
               nullable=True)
    
    # Drop the new primary key
    op.drop_constraint('roles_pkey', 'roles', type_='primary')
    
    # Drop the unique constraint
    op.drop_constraint(None, 'roles', type_='unique')
    
    # Recreate the old composite primary key
    op.create_primary_key('roles_pkey', 'roles', ['module_name', 'name'])
    
    # Drop the id column
    op.drop_column('roles', 'id')
    
    # Drop the user_role_mappings table
    op.drop_table('user_role_mappings')
    # ### end Alembic commands ###